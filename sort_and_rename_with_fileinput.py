# @ File(label='Choose a directory with datasets', style='directory') datasets_dir
# @ File(label='Choose a file with metadata about embryo directions', style='file') metadata_file
# @ String(label='Dataset prefix', value='MGolden2022A-') dataset_name_prefix


import os
import fnmatch
import json
import logging
from datetime import datetime
from java.io import File

EXAMPLE_JSON_METADATA_FILE = """
Example JSON metadata file contents:
{
    "datasets": [
        {
            "ID": 1,
            "specimens_for_directions_1234": [
                5,
                6,
                4,
                7
            ]
        },
        {
            "ID": 3,
            "specimens_for_directions_1234": [
                0,
                1,
                2,
                3
            ]
        }
    ]
}"""

def move_files_for_datasets(datasets_dir, metadata_file, dataset_name_prefix):
    # Converting a File object to a string.
    if isinstance(metadata_file, File):
        metadata_file = metadata_file.getAbsolutePath()
    if isinstance(datasets_dir, File):
        datasets_dir = datasets_dir.getAbsolutePath()

    
    with open(metadata_file) as f:
        try:
            datasets_meta = json.load(f)
        except ValueError as err:
            print("Could not load the JSON metadata file.")
            print("Error generated by the JSON parser: \n%s" % err)
            print(EXAMPLE_JSON_METADATA_FILE)
            exit(1)

    now = datetime.now()
    dt_string = now.strftime("%Y-%b-%d-%H%M%S")
    logging.basicConfig(filename=os.path.join(datasets_dir, "%s-sort_rename.log" % dt_string),
                        filemode='w',
                        format='%(asctime)s-%(levelname)s - %(message)s',
                        datefmt='%d-%b-%y %H:%M:%S',
                        level=logging.INFO)
            
    for dataset in datasets_meta["datasets"]:
        dataset_id = dataset["ID"]
        specimens = dataset["specimens_for_directions_1234"]

        if not is_dataset_ID_input_valid(dataset_id):
            print("Error while parsing .json file: not a valid dataset ID: \"%s\" skipping. Dataset ID should be an integer from 0 to 9999." % dataset_id)
            print(EXAMPLE_JSON_METADATA_FILE)
            continue
        if not is_specimen_input_valid(specimens):
            print("Error while parsing .json file: not a valid specimen list \"%s\" for the dataset with ID: \"%s\" skipping." % (specimens, dataset_id))
            print(EXAMPLE_JSON_METADATA_FILE)
            continue

        image_dir = get_images_directory(datasets_dir, dataset_id)
        if not image_dir:
            continue
        move_files(
            image_dir, specimens, dataset_id, dataset_name_prefix)
        print("Arranged files for the dataset: DS%04d" % dataset_id)



def get_images_directory(datasets_dir, dataset_id):
    dirs = [name for name in os.listdir(
        datasets_dir) if os.path.isdir(os.path.join(datasets_dir, name))]

    this_dataset_dir = fnmatch.filter(dirs, "DS%04d*" % dataset_id)
    if len(this_dataset_dir) > 1:
        print("Error: there are multiple directories for the dataset with ID: %04d. Skipping it." % dataset_id)
        return None
    if len(this_dataset_dir) == 0:
        print("Error: there are no directories for the dataset with ID: %04d. Skipping it." % dataset_id)
        return None
    image_dir = os.path.join(
        datasets_dir, this_dataset_dir[0], "(P0)-ZStacks-Raw")
    if not os.path.isdir(image_dir):
        print("Error: there are no (P0)-ZStacks-Raw directoriy for the dataset with ID: %04d. Skipping it." % dataset_id)
        return None
    return image_dir
    
    
def move_files(image_dir, specimens_per_direction, dataset_id, dataset_name_prefix):
    direction_dirs = []
    for i in range(1,5):
        new_dir = os.path.join(image_dir, "DR" + str(i).zfill(4))
        direction_dirs.append(new_dir)
        if not os.path.exists(new_dir):
            os.mkdir(new_dir)
        

    for file_name in os.listdir(image_dir):
        file_path = os.path.join(image_dir, file_name)

        if os.path.isdir(file_path):
            continue
        if not file_name.endswith((".tif", ".TIF")):
            continue

        specimen = int(
            file_name[file_name.find("SPC0") + 4: file_name.find("SPC0") + 6])

        if not specimen in specimens_per_direction:
            raise Exception("In the metadata for the dataset: DS %04d there is no entry for the specimen: %i" % (dataset_id, specimen))

        embryo_direction = specimens_per_direction.index(specimen) + 1  
        time_point = int(
            file_name[file_name.find("TL") + 2: file_name.find("TL") + 6]) + 1
        new_file_name = "%sDS%04dTP%04dDR%04dCH0001PL(ZS).tif" % (dataset_name_prefix,
                                                                 dataset_id,
                                                                 time_point, 
                                                                 embryo_direction)
        os.rename(file_path, os.path.join(direction_dirs[embryo_direction - 1], new_file_name))
        logging.info("New file \n%s\n Full path:\n%s\n Original name: \n%s\n Original path: \n%s\n" % (new_file_name,
                                                                                                     os.path.join(
                                                                                                         direction_dirs[embryo_direction - 1], new_file_name),
                                                                                                    file_name,
                                                                                                    file_path)
                    )
        

def is_specimen_input_valid(specimens_per_direction):
    if not isinstance(specimens_per_direction, list):
        return False
    if sorted(specimens_per_direction) == [0, 1, 2, 3] or sorted(specimens_per_direction) == [4, 5, 6, 7]:
        return True
    return False

def is_dataset_ID_input_valid(dataset_id):
    if not isinstance(dataset_id, int):
        return False
    if dataset_id in range(10000):
        return True
    return False


# For each entry in .json file
# Get dataset information form the .json file
# find dataset directory starting with ex. DS0002
# there in the (P0)-ZStacks-Raw directory 
# create 4 directions directories
# for each file in this image_dir:
# parse file name
#   get species
#   determine corresponding direction
#   rename it
#   put in the corresponding direction directory



if __name__ in ['__builtin__','__main__']:
    # move_files_for_datasets("/home/tema/work/for_Mashunja/fiji_scripts/test_dir/",
    #                         "/home/tema/work/for_Mashunja/fiji_scripts/directions.json",
    #                         dataset_name_prefix="MGolden2022A-")
    move_files_for_datasets(datasets_dir,metadata_file, dataset_name_prefix)
